{"version":3,"sources":["myComponends/question/Question.js","myComponends/answer/Answer.js","myComponends/TestCenter.js","App.js","serviceWorker.js","index.js"],"names":["Question","props","question","Answer","answer","Object","keys","map","qAnswer","i","className","correctAnswer","clickAnswer","onClick","CheckAnswer","key","disabled","Test","state","questions","1","2","3","answers","correctAnswers","step","score","setState","nextStep","this","length","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mTAUeA,G,MAHE,SAACC,GACd,OAAO,4BAAKA,EAAMC,YCoCPC,G,MAvCA,SAACF,GAEZ,IAAIG,EAASC,OAAOC,KAAKL,EAAMG,QAC1BG,KAAI,SAACC,EAASC,GAAV,OACD,wBACIC,UAEIT,EAAMU,gBAAkBH,EACpB,UACAP,EAAMW,cAAgBJ,EAClB,YAAc,GAG1BK,QAAS,kBAAMZ,EAAMa,YAAYN,IACjCO,IAAKP,GACJP,EAAMG,OAAOI,OAM1B,OACI,oCACI,wBAAIQ,WAAUf,EAAMW,YAA4BF,UAAU,WACrDN,GAEL,6BAGQH,EAAMU,cACN,iBACAV,EAAMW,YACN,kBAAoB,OChCnBK,G,kNACjBC,MAAQ,CACJC,UAAW,CACPC,EAAG,0DACHC,EAAG,+EACHC,EAAG,uJAEPC,QAAS,CACLH,EAAG,CAECA,EAAG,WACHC,EAAG,UACHC,EAAG,UAEPD,EAAG,CAECD,EAAG,mBACHC,EAAG,YACHC,EAAG,cAEPA,EAAG,CAECF,EAAG,UACHC,EAAG,UACHC,EAAG,gBAGXE,eAAgB,CACZJ,EAAG,IACHC,EAAG,IACHC,EAAG,KAEPX,cAAe,EACfC,YAAa,EACba,KAAM,EACNC,MAAO,G,EAGXZ,YAAc,SAAAV,GAAW,IAAD,EACgD,EAAKc,MAAjEM,EADY,EACZA,eAA4CC,GADhC,EACId,cADJ,EACmBC,YADnB,EACgCa,MAAMC,EADtC,EACsCA,MACtDtB,IAAWoB,EAAeC,GAC1B,EAAKE,SAAS,CACVD,MAAOA,EAAQ,EACff,cAAea,EAAeC,GAC9Bb,YAAaR,IAIjB,EAAKuB,SAAS,CACVhB,cAAe,EACfC,YAAaR,K,EAOzBwB,SAAW,SAAAH,GACP,EAAKE,SAAS,CACVF,KAAMA,EAAO,EACbd,cAAe,EACfC,YAAa,K,uDAKX,IAAD,SACgEiB,KAAKX,MAApEC,EADD,EACCA,UAAWI,EADZ,EACYA,QAASZ,EADrB,EACqBA,cAAeC,EADpC,EACoCA,YAAaa,EADjD,EACiDA,KAAMC,EADvD,EACuDA,MAC5D,OACI,yBAAKhB,UAAU,WACVe,GAAQpB,OAAOC,KAAKa,GAAWW,OAC3B,oCACD,kBAAC,EAAD,CACI5B,SAAUiB,EAAUM,KAExB,kBAAC,EAAD,CACIrB,OAAQmB,EAAQE,GAChBA,KAAMA,EACNX,YAAae,KAAKf,YAClBH,cAAeA,EACfC,YAAaA,IAGjB,4BACIF,UAAU,WACVM,WACIJ,GAAeP,OAAOC,KAAKa,GAAWW,QAAUL,GAGpDZ,QAAS,kBAAM,EAAKe,SAASH,KANjC,SAWA,yBAAKf,UAAU,aACX,0DACA,8CAAoBgB,EAApB,OAA+BrB,OAAOC,KAAKa,GAAWW,QACtD,+C,GAjGUC,c,MCUnBC,MARf,WACE,OACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,QCEcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.48da0c5b.chunk.js","sourcesContent":["import React from 'react';\r\nimport'./Question.css';\r\n// The \"Functional Component\": call the component from the TestCener \r\n//and sent it this component to edit and update, then we style it in .css component \r\n//then returnt it back to se updatet it here and pull it backTestCenter\r\n//(props) is here  question={questions[step]} the qeustion\r\n\r\nconst Question = (props) => {\r\n    return(<h1>{props.question}</h1>);\r\n}\r\nexport default Question;","import React from 'react';\r\nimport './Answer.css';\r\n\r\n\r\n//Functional Component\r\nconst Answer = (props) => {\r\n\r\n    let answer = Object.keys(props.answer)\r\n        .map((qAnswer, i) => (\r\n            <li\r\n                className=\r\n                {\r\n                    props.correctAnswer === qAnswer ?\r\n                        'correct' :\r\n                        props.clickAnswer === qAnswer ?\r\n                            'incorrect' : ''\r\n                }\r\n\r\n                onClick={() => props.CheckAnswer(qAnswer)}\r\n                key={qAnswer}>\r\n                {props.answer[qAnswer]}\r\n\r\n            </li>\r\n\r\n        ));\r\n\r\n    return (\r\n        <>\r\n            <ul disabled={props.clickAnswer ? true : false} className=\"Answers\">\r\n                {answer}\r\n            </ul>\r\n            <div>\r\n                {\r\n                    // IF statment for correct answer\r\n                    props.correctAnswer ?\r\n                    'Correct Answer' :\r\n                    props.clickAnswer ?\r\n                    'Incorect Answer' : ''\r\n                }\r\n            </div>\r\n\r\n        </>\r\n    );\r\n}\r\nexport default Answer;","import React, { component, Component } from 'react';\r\nimport Question from './question/Question';\r\nimport Answer from './answer/Answer';\r\nimport './TestCenter.css';\r\n\r\nexport default class Test extends Component {\r\n    state = {\r\n        questions: {\r\n            1: 'Which built-in method returns the length of the string?',\r\n            2: ' Which of the following function of Number object returns the numbers value?',\r\n            3: ' Which of the following function of String object causes a string to be displayed in the specified color as if it were in a <font color=color> tag?',\r\n        },\r\n        answers: {\r\n            1: {\r\n\r\n                1: 'length()',\r\n                2: 'index()',\r\n                3: 'size()',\r\n            },\r\n            2: {\r\n\r\n                1: 'toLocaleString()',\r\n                2: 'valueOf()',\r\n                3: 'toString()',\r\n            },\r\n            3: {\r\n\r\n                1: 'blink()',\r\n                2: 'fixed()',\r\n                3: 'fontcolor()',\r\n            },\r\n        },\r\n        correctAnswers: {\r\n            1: '1',\r\n            2: '2',\r\n            3: '3',\r\n        },\r\n        correctAnswer: 0,\r\n        clickAnswer: 0,\r\n        step: 1,\r\n        score: 0,\r\n    }\r\n\r\n    CheckAnswer = answer => {\r\n        const { correctAnswers, correctAnswer, clickAnswer, step, score } = this.state;\r\n        if (answer === correctAnswers[step]) {\r\n            this.setState({\r\n                score: score + 1,\r\n                correctAnswer: correctAnswers[step],\r\n                clickAnswer: answer\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                correctAnswer: 0,\r\n                clickAnswer: answer\r\n            });\r\n\r\n\r\n        }\r\n    }\r\n\r\n    nextStep = step => {\r\n        this.setState({\r\n            step: step + 1,\r\n            correctAnswer: 0,\r\n            clickAnswer: 0,\r\n\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let { questions, answers, correctAnswer, clickAnswer, step, score} = this.state;\r\n        return (\r\n            <div className='Content'>\r\n                {step <= Object.keys(questions).length ?\r\n                    (<>\r\n                    <Question\r\n                        question={questions[step]}\r\n                    />\r\n                    <Answer\r\n                        answer={answers[step]}\r\n                        step={step}\r\n                        CheckAnswer={this.CheckAnswer}\r\n                        correctAnswer={correctAnswer}\r\n                        clickAnswer={clickAnswer}\r\n\r\n                    />\r\n                    <button\r\n                        className='NextStep'\r\n                        disabled={\r\n                            clickAnswer && Object.keys(questions).length >= step\r\n                                ? false : true\r\n                        }\r\n                        onClick={() => this.nextStep(step)}\r\n                    >\r\n                        Next\r\n                </button>\r\n                </>) : (\r\n                    <div className=\"finalpage\">\r\n                        <h1>you have complete the quiz</h1>\r\n                        <p> your score is: {score} of {Object.keys(questions).length}</p>\r\n                        <p>Thank you!</p>\r\n                        </div>\r\n                )\r\n                }\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n}","import React from 'react';\n//import logo from './logo.svg';\nimport Test from './myComponends/TestCenter';\nimport './App.css';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Test />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}